{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class StateService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.checkBox = new BehaviorSubject([]);\n    this.currentCheckBox = this.checkBox.asObservable();\n    this.vacations = new BehaviorSubject([]);\n    this.currentVacations = this.vacations.asObservable();\n    this.actions = new BehaviorSubject([]);\n    this.currentActions = this.actions.asObservable();\n    this.modeUser = new BehaviorSubject(false);\n    this.currentModeUser = this.modeUser.asObservable();\n    this.modeAdmin = new BehaviorSubject(false);\n    this.currentModeAdmin = this.modeAdmin.asObservable();\n    this.showLoginModal = new BehaviorSubject(true);\n    this.currentShowLoginModal = this.showLoginModal.asObservable();\n    this.isLogin = new BehaviorSubject(false);\n    this.currentIsLogin = this.isLogin.asObservable();\n    this.showNewVacationModal = new BehaviorSubject(false);\n    this.currentShowNewVacationModal = this.showNewVacationModal.asObservable();\n    this.showVacationUpdate = new BehaviorSubject(false);\n    this.currentShowVacationUpdate = this.showVacationUpdate.asObservable();\n    this.showVacationDelete = new BehaviorSubject(false);\n    this.currentShowVacationDelete = this.showVacationDelete.asObservable();\n    this.showRegisterModal = new BehaviorSubject(false);\n    this.currentShowRegisterModal = this.showRegisterModal.asObservable();\n    this.nameOfUser = new BehaviorSubject('Guest');\n    this.currentNameOfUser = this.nameOfUser.asObservable();\n  }\n  changeCheckBox(value) {\n    this.checkBox.next(value);\n  }\n  changeVacations(value) {\n    this.vacations.next(value);\n  }\n  changeA(value) {\n    changeA(value, any);\n    {\n      this.vacations.next(value);\n    }\n    changeModeUser(value, boolean);\n    {\n      this.modeUser.next(value);\n    }\n    changeModeAdmin(value, boolean);\n    {\n      this.modeAdmin.next(value);\n    }\n    changeShowLoginModal(value, boolean);\n    {\n      this.showLoginModal.next(value);\n    }\n    changeIsLogin(value, boolean);\n    {\n      this.isLogin.next(value);\n    }\n    changeShowNewVacationModal(value, boolean);\n    {\n      this.showNewVacationModal.next(value);\n    }\n    changeShowVacationUpdate(value, boolean);\n    {\n      this.showVacationUpdate.next(value);\n    }\n    changeShowVacationDelete(value, boolean);\n    {\n      this.showVacationDelete.next(value);\n    }\n    changeShowRegisterModal(value, any);\n    {\n      this.showRegisterModal.next(value);\n    }\n    changeNameOfUser(value, string);\n    {\n      this.nameOfUser.next(value);\n    }\n    checkLogin();\n    {\n      const jwt = this.cookieService.get('token');\n      if (jwt) {\n        this.changeIsLogin(true);\n        this.changeShowLoginModal(false);\n        axios.get('http://localhost:8080/profile', {\n          withCredentials: true,\n          headers: {\n            authorization: `Bearer ${jwt}`\n          }\n        }).then(response => {\n          const {\n            userName,\n            admin\n          } = response.data;\n          if (admin) {\n            this.changeModeAdmin(true);\n            this.changeModeUser(false);\n            this.changeNameOfUser(userName);\n          }\n          if (!admin) {\n            this.checkFav();\n            this.changeModeUser(true);\n            this.changeModeAdmin(false);\n            this.changeNameOfUser(userName);\n          }\n        }).catch(function (error) {\n          console.log(error.message);\n          alert(error.message);\n        });\n      }\n    }\n    checkFav();\n    {\n      let checkBoxIds = [];\n      const jwt = this.cookieService.get('token');\n      axios.get('http://localhost:8080/fav', {\n        withCredentials: true,\n        headers: {\n          authorization: `Bearer ${jwt}`\n        }\n      }).then(response => {\n        const data = response.data;\n        if (data.length && Array.isArray(data)) {\n          checkBoxIds = data.map(item => item.vacation_id);\n        }\n        this.changeCheckBox(checkBoxIds);\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n    getVacation();\n    {\n      this.http.get('http://localhost:8080/vacations').subscribe(data => {\n        this.changeVacations(data);\n      });\n    }\n  }\n}\nStateService.ɵfac = function StateService_Factory(t) {\n  return new (t || StateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StateService,\n  factory: StateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","axios","StateService","constructor","http","cookieService","checkBox","asObservable","vacations","actions","modeUser","modeAdmin","showLoginModal","isLogin","showNewVacationModal","showVacationUpdate","showVacationDelete","showRegisterModal","nameOfUser","changeCheckBox","value","next","changeVacations","changeA","any","changeModeUser","boolean","changeModeAdmin","changeShowLoginModal","changeIsLogin","changeShowNewVacationModal","changeShowVacationUpdate","changeShowVacationDelete","changeShowRegisterModal","changeNameOfUser","string","checkLogin","jwt","get","withCredentials","headers","authorization","then","response","userName","admin","data","checkFav","catch","error","console","log","message","alert","checkBoxIds","length","Array","isArray","map","item","vacation_id","getVacation","subscribe","factory","providedIn"],"sourceRoot":"","sources":["D:\\workSpace\\Angular-Mongo_task\\myapp\\src\\app\\service\\shared.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateService {\n  private checkBox = new BehaviorSubject<any[]>([]);\n  currentCheckBox = this.checkBox.asObservable();\n\n  vacations = new BehaviorSubject<any>([]);\n  currentVacations = this.vacations.asObservable();\n\n  actions = new BehaviorSubject<any>([]);\n  currentActions = this.actions.asObservable();\n\n  private modeUser = new BehaviorSubject<boolean>(false);\n  currentModeUser = this.modeUser.asObservable();\n\n  private modeAdmin = new BehaviorSubject<boolean>(false);\n  currentModeAdmin = this.modeAdmin.asObservable();\n\n  private showLoginModal = new BehaviorSubject<boolean>(true);\n  currentShowLoginModal = this.showLoginModal.asObservable();\n\n  private isLogin = new BehaviorSubject<boolean>(false);\n  currentIsLogin = this.isLogin.asObservable();\n\n  private showNewVacationModal = new BehaviorSubject<boolean>(false);\n  currentShowNewVacationModal = this.showNewVacationModal.asObservable();\n\n  private showVacationUpdate = new BehaviorSubject<boolean>(false);\n  currentShowVacationUpdate = this.showVacationUpdate.asObservable();\n\n  private showVacationDelete = new BehaviorSubject<any>(false);\n  currentShowVacationDelete = this.showVacationDelete.asObservable();\n\n  private showRegisterModal = new BehaviorSubject<any>(false);\n  currentShowRegisterModal = this.showRegisterModal.asObservable();\n\n  nameOfUser = new BehaviorSubject<string>('Guest');\n  currentNameOfUser = this.nameOfUser.asObservable();\n  response: any;\n  data: any;\n\n  constructor(private http: HttpClient, private cookieService: CookieService) {}\n\n  changeCheckBox(value: any[]) {\n    this.checkBox.next(value);\n  }\n\n  changeVacations(value: any) {\n    this.vacations.next(value);\n  }\n\n  changeA(value: any) {\n    changeA(value: any) {\n    this.vacations.next(value);\n  }\n\n  changeModeUser(value: boolean) {\n    this.modeUser.next(value);\n  }\n\n  changeModeAdmin(value: boolean) {\n    this.modeAdmin.next(value);\n  }\n\n  changeShowLoginModal(value: boolean) {\n    this.showLoginModal.next(value);\n  }\n\n  changeIsLogin(value: boolean) {\n    this.isLogin.next(value);\n  }\n\n  changeShowNewVacationModal(value: boolean) {\n    this.showNewVacationModal.next(value);\n  }\n\n  changeShowVacationUpdate(value: boolean) {\n    this.showVacationUpdate.next(value);\n  }\n\n  changeShowVacationDelete(value: boolean) {\n    this.showVacationDelete.next(value);\n  }\n\n  changeShowRegisterModal(value: any) {\n    this.showRegisterModal.next(value);\n  }\n\n  changeNameOfUser(value: string) {\n    this.nameOfUser.next(value);\n  }\n\n  checkLogin() {\n    const jwt = this.cookieService.get('token');\n    if (jwt) {\n      this.changeIsLogin(true);\n      this.changeShowLoginModal(false);\n\n      axios\n        .get('http://localhost:8080/profile', {\n          withCredentials: true,\n          headers: { authorization: `Bearer ${jwt}` },\n        })\n        .then((response) => {\n          const { userName, admin } = response.data;\n          if (admin) {\n            this.changeModeAdmin(true);\n            this.changeModeUser(false);\n            this.changeNameOfUser(userName);\n          }\n          if (!admin) {\n            this.checkFav();\n            this.changeModeUser(true);\n            this.changeModeAdmin(false);\n            this.changeNameOfUser(userName);\n          }\n        })\n        .catch(function (error) {\n          console.log(error.message);\n          alert(error.message);\n        });\n    }\n  }\n\n  checkFav() {\n    let checkBoxIds: any[] = [];\n\n    const jwt = this.cookieService.get('token');\n    axios\n      .get('http://localhost:8080/fav', {\n        withCredentials: true,\n        headers: { authorization: `Bearer ${jwt}` },\n      })\n      .then((response) => {\n        const data = response.data;\n        if (data.length && Array.isArray(data)) {\n          checkBoxIds = data\n            .map((item: {vacation_id: any }) => item.vacation_id)\n        }\n        this.changeCheckBox(checkBoxIds);\n      })\n      .catch(function (error) {\n        alert(error);\n      });\n  }\n  getVacation() {\n    this.http.get('http://localhost:8080/vacations').subscribe((data) => {\n      this.changeVacations(data);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}