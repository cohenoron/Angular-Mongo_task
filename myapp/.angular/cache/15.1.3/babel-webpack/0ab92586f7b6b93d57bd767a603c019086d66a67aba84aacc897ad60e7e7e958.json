{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nlet StateService = class StateService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.actions = new BehaviorSubject([]);\n    this.currentActions = this.actions.asObservable();\n  }\n  changeActions(value) {\n    this.actions.next(value);\n  }\n  getActions() {\n    this.http.get('http://localhost:8080/actions').subscribe(data => {\n      this.changeActions(data);\n    });\n  }\n};\nStateService = __decorate([Injectable({\n  providedIn: 'root'\n})], StateService);\nexport { StateService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,eAAe,QAAQ,MAAM;AAO/B,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAMvBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;IAL3D,YAAO,GAAG,IAAIJ,eAAe,CAAM,EAAE,CAAC;IACtC,mBAAc,GAAG,IAAI,CAACK,OAAO,CAACC,YAAY,EAAE;EAIiC;EAE7EC,aAAa,CAACC,KAAU;IACtB,IAAI,CAACH,OAAO,CAACI,IAAI,CAACD,KAAK,CAAC;EAC1B;EAEAE,UAAU;IACR,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,+BAA+B,CAAC,CAACC,SAAS,CAAEC,IAAI,IAAI;MAChE,IAAI,CAACN,aAAa,CAACM,IAAI,CAAC;IAC1B,CAAC,CAAC;EACJ;CACD;AAjBYZ,YAAY,eAHxBF,UAAU,CAAC;EACVe,UAAU,EAAE;CACb,CAAC,GACWb,YAAY,CAiBxB;SAjBYA,YAAY","names":["Injectable","BehaviorSubject","StateService","constructor","http","cookieService","actions","asObservable","changeActions","value","next","getActions","get","subscribe","data","providedIn"],"sourceRoot":"","sources":["D:\\workSpace\\Angular-Mongo_task\\myapp\\src\\app\\service\\shared.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateService {\n  actions = new BehaviorSubject<any>([]);\n  currentActions = this.actions.asObservable();\n  response: any;\n  data: any;\n\n  constructor(private http: HttpClient, private cookieService: CookieService) {}\n\n  changeActions(value: any) {\n    this.actions.next(value);\n  }\n\n  getActions() {\n    this.http.get('http://localhost:8080/actions').subscribe((data) => {\n      this.changeActions(data);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}