{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class StateService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.actions = new BehaviorSubject([]);\n    this.currentActions = this.actions.asObservable();\n  }\n  changeActions(value) {\n    this.actions.next(value);\n  }\n  checkFav() {\n    let checkBoxIds = [];\n    const jwt = this.cookieService.get('token');\n    axios.get('http://localhost:8080/fav', {\n      withCredentials: true,\n      headers: {\n        authorization: `Bearer ${jwt}`\n      }\n    }).then(response => {\n      const data = response.data;\n      if (data.length && Array.isArray(data)) {\n        checkBoxIds = data.map(item => item.vacation_id);\n      }\n      this.changeCheckBox(checkBoxIds);\n    }).catch(function (error) {\n      alert(error);\n    });\n  }\n  getVacation() {}\n  getActions() {\n    this.http.get('http://localhost:8080/actions').subscribe(data => {\n      this.changeActions(data);\n    });\n  }\n}\nStateService.ɵfac = function StateService_Factory(t) {\n  return new (t || StateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StateService,\n  factory: StateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;AAGtC,OAAOC,KAAK,MAAM,OAAO;;;;AAKzB,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;IAL3D,YAAO,GAAG,IAAIL,eAAe,CAAM,EAAE,CAAC;IACtC,mBAAc,GAAG,IAAI,CAACM,OAAO,CAACC,YAAY,EAAE;EAIiC;EAG7EC,aAAa,CAACC,KAAU;IACtB,IAAI,CAACH,OAAO,CAACI,IAAI,CAACD,KAAK,CAAC;EAC1B;EAGAE,QAAQ;IACN,IAAIC,WAAW,GAAU,EAAE;IAE3B,MAAMC,GAAG,GAAG,IAAI,CAACR,aAAa,CAACS,GAAG,CAAC,OAAO,CAAC;IAC3Cb,KAAK,CACFa,GAAG,CAAC,2BAA2B,EAAE;MAChCC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUJ,GAAG;MAAE;KAC1C,CAAC,CACDK,IAAI,CAAEC,QAAQ,IAAI;MACjB,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAC1B,IAAIA,IAAI,CAACC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QACtCR,WAAW,GAAGQ,IAAI,CAACI,GAAG,CACnBC,IAA0B,IAAKA,IAAI,CAACC,WAAW,CACjD;;MAEH,IAAI,CAACC,cAAc,CAACf,WAAW,CAAC;IAClC,CAAC,CAAC,CACDgB,KAAK,CAAC,UAAUC,KAAK;MACpBC,KAAK,CAACD,KAAK,CAAC;IACd,CAAC,CAAC;EACN;EACAE,WAAW,IAAI;EAEfC,UAAU;IACR,IAAI,CAAC5B,IAAI,CAACU,GAAG,CAAC,+BAA+B,CAAC,CAACmB,SAAS,CAAEb,IAAI,IAAI;MAChE,IAAI,CAACZ,aAAa,CAACY,IAAI,CAAC;IAC1B,CAAC,CAAC;EACJ;;AA1CWlB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgC,SAAZhC,YAAY;EAAAiC,YAFX;AAAM","names":["BehaviorSubject","axios","StateService","constructor","http","cookieService","actions","asObservable","changeActions","value","next","checkFav","checkBoxIds","jwt","get","withCredentials","headers","authorization","then","response","data","length","Array","isArray","map","item","vacation_id","changeCheckBox","catch","error","alert","getVacation","getActions","subscribe","factory","providedIn"],"sourceRoot":"","sources":["D:\\workSpace\\Angular-Mongo_task\\myapp\\src\\app\\service\\shared.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport axios from 'axios';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateService {\n  actions = new BehaviorSubject<any>([]);\n  currentActions = this.actions.asObservable();\n  response: any;\n  data: any;\n\n  constructor(private http: HttpClient, private cookieService: CookieService) {}\n\n\n  changeActions(value: any) {\n    this.actions.next(value);\n  }\n\n\n  checkFav() {\n    let checkBoxIds: any[] = [];\n\n    const jwt = this.cookieService.get('token');\n    axios\n      .get('http://localhost:8080/fav', {\n        withCredentials: true,\n        headers: { authorization: `Bearer ${jwt}` },\n      })\n      .then((response) => {\n        const data = response.data;\n        if (data.length && Array.isArray(data)) {\n          checkBoxIds = data.map(\n            (item: { vacation_id: any }) => item.vacation_id\n          );\n        }\n        this.changeCheckBox(checkBoxIds);\n      })\n      .catch(function (error) {\n        alert(error);\n      });\n  }\n  getVacation() {}\n\n  getActions() {\n    this.http.get('http://localhost:8080/actions').subscribe((data) => {\n      this.changeActions(data);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}